# Environments
# ------------
#
# * cmd
#       Run the command line interface (`python -m flake8_aaa`) on all good
#       example files. Expect no errors and no non-zero error codes.
# * cmdbad
#       Run all bad examples through command line interface and ensure an error
#       code is returned for every one.
# * doc
#       Emulate the documentation build on RTD.
# * install
#       Assert that plugin can be installed and run via flake8 in a clean venv.
#       Flake8 is called with flake8-aaa installed to lint flake8-aaa's tests
#       (dog fooding) and the "good" examples. Test requirements do not include
#       flake8-aaa - the latest version is installed by tox during testing.
# * lint
#       "Internal" linting and formatting on the codebase and tests. Not run
#       with Flake8-aaa installed (that happens in "install" env). Does not
#       check examples (that happens in "lintexamples" env).
# * lintexamples
#       Check all examples, good and bad, pass linting with vanilla Flake8 and
#       assert tests formatted with Black pass.
# * test
#       Run pytest on test suite.

[tox]
envlist = py3{5,6,7}-{install,lint,test,cmd,cmdbad},py3{6,7}-lintexamples,py36-doc

[install]
commands =
    flake8 --version
    flake8 tests examples/good
    - bash -c "flake8 examples/bad/ | sort > {envtmpdir}/out"
    diff {envtmpdir}/out examples/bad/bad_expected.out

[testenv]
deps =
    doc,lint,test: -rrequirements/test.txt
    lintexamples: -rrequirements/lintexamples.txt
    install: flake8>=3
commands =
    cmd: make cmd
    cmdbad: make cmdbad
    doc: make doc
    install: {[install]commands}
    lint: make lint
    lintexamples: make lintexamples
    test: pytest {posargs:tests}
skip_install =
    lint: true
    lintexamples: true
setenv =
    PYTHONWARNINGS = default
whitelist_externals =
    bash
    diff
    make
